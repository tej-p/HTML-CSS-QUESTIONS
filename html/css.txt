Question-how to add comments on css?

Answer-
To comment in CSS, simply place your plain text inside \* */ marks. This tells the browser that 
they are notes and should not be rendered on the front end.

Question-Why do we use pseudo-class?

Answer-
CSS pseudo-classes are used to add special effects to some selectors.

Question-How is specificity applied?

Answer-
If there are two or more CSS rules that point to the same element, the selector with the highest 
specificity value will "win", and its style declaration will be applied to that HTML element.
Think of specificity as a score/rank that determines which style declaration are ultimately applied 
to an element.

The amount of specificity a selector has is measured using four different values (or components), 
which can be thought of as thousands, hundreds, tens and ones — four single digits in four columns:

    1000 - Inline/Style Tag
    Hundreds - One for each ID Selector
T   ens - One for each class selector, attribute selector, pseudo-class contained inside the overall 
    selector.
    Ones - One for each element selector, pseudo-element contained inside the overall selector.

Note: Universal selector (*), combinators (+, >, ~, ' ') and negation pseudo-class (:not) have no 
effect on specificity.

Question-What method allows an element to be moved from its current position?

Answer-
The translate() method moves an element from its current position (according to the parameters given
for the X-axis and the Y-axis).

Question-What properties does flex model have?

Answer-
Properties for the parent (flex-container):

display:
This defines a flex container; inline or block depending on the given value. It enables a flex 
context for all its direct children.

flex-direction:
The flex-direction property defines in which direction the container wants to stack the flex items. 
Flexbox is a single-direction layout concept. Think of flex items as primarily laying out either in 
horizontal rows or vertical columns.

    row (default): left to right
    row-reverse: right to left
    column: same as row but top to bottom
    column-reverse: same as row-reverse but bottom to top

flex-wrap:
By default, flex items will all try to fit onto one line. You can change that and allow the items to 
wrap as needed with this property.

    nowrap (default): all flex items will be on one line
    wrap: flex items will wrap onto multiple lines, from top to bottom.
    wrap-reverse: flex items will wrap onto multiple lines from bottom to top.

flex-flow:
This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex 
container’s main and cross axes. The default value is row nowrap.

justify-content
The justify-content property is used to align the flex items along the main axis;

    flex-start (default): items are packed toward the start of the flex-direction.
    flex-end: items are packed toward the end of the flex-direction.
    start: items are packed toward the start of the writing-mode direction.
    end: items are packed toward the end of the writing-mode direction.
    left: items are packed toward left edge of the container, unless that doesn’t make sense with 
    the flex-direction, then it behaves like start.
    right: items are packed toward right edge of the container, unless that doesn’t make sense with 
    the flex-direction, then it behaves like end.
    center: items are centered along the line
    space-between: items are evenly distributed in the line; first item is on the start line, last 
    item on the end line
    space-around: items are evenly distributed in the line with equal space around them. Note that 
    visually the spaces aren’t equal, since all the items have equal space on both sides. The first 
    item will have one unit of space against the container edge, but two units of space between the 
    next item because that next item has its own spacing that applies.
    space-evenly: items are distributed so that the spacing between any two items (and the space to 
    the edges) is equal.
    PS : The safest values are flex-start, flex-end, and center. (as some of the properties never 
    got support from browser)

align-items
The align-items property is used to align the flex items along the cross axis.

    stretch (default): The stretch value stretches the flex items to fill the container (this is default):
    flex-start / start / self-start: items are placed at the start of the cross axis.
    flex-end / end / self-end: items are placed at the end of the cross axis.
    center: The center value aligns the flex items in the middle of the container
    baseline: items are aligned such as their baselines align.

align-content
This aligns a flex container’s lines within when there is extra space in the cross-axis, similar to 
how justify-content aligns individual items within the main-axis.

Note : This property only takes effect on multi-line flexible containers, where flex-wrap is set to 
either wrap or wrap-reverse).

    flex-start :items packed to the start of the container
    flex-end : items packed to the end of the container.
    center : items centered in the container
    space-between : items evenly distributed; the first line is at the start of the container while the last one is at the end
    space-around : items evenly distributed with equal space around each line
    space-evenly : items are evenly distributed with equal space around them
    stretch : lines stretch to take up the remaining space.

gap, row gap, column gap
The gap property explicitly controls the space between flex items. It applies that spacing only 
between items not on the outer edges.

Properties for the children (flex-items);
order
The order property can change the order of the flex items:
flex-grow
The flex-grow property specifies how much a flex item will grow relative to the rest of the flex 
items.

flex-shrink
The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex 
items.

flex-basis
The flex-basis property specifies the initial length of a flex item before the remaining space is 
distributed.

flex
The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties.

align-self
    The align-self property specifies the alignment for the selected item inside the flexible 
    container.

    The align-self property overrides the default alignment set by the container's align-items 
    property.

Question-What is the difference between flex and grids?

Answer-
Grid is made for two-dimensional layout while Flexbox is for one. This means Flexbox can work on 
either row or columns at a time, but Grids can work on both.

Major Uniqueness between Flexbox and Grids is that the former works on content while the latter is 
based on the layout.

CSS Grids helps you create the outer layout of the webpage. You can build complex as well responsive 
design with this. This is why it is called ‘layout first’. Flexbox mostly helps align content & move 
blocks.

Question-Give an example where we have to use grids and where you have to use flexbox?

Answer-
CSS Grids helps you create the outer layout of the webpage. You can build complex as well responsive 
design with this. This is why it is called ‘layout first’. While flexbox mostly helps align content 
& move blocks.

CSS grids are for 2D layouts. It works with both rows and columns.Flexbox works better in one 
dimension only (either rows OR columns).

You should consider flexbox when :

You have a small design to implement
You need to align elements
You need a content-first design
You should consider CSS grid when :

You have a complex design to implement
You need to have a gap between block elements
You need to overlap elements
You need a layout-first design
In simple terms
"CSS grid is for layout, Flexbox is for alignment"

Question-Give an example where you cannot use flexbox, and you can only use grids?

Answer-
Grid is usually used to make a more complex layout. You can build complex as well responsive design 
with this. It works with both rows and columns.Flexbox works better in one dimension only (either 
rows OR columns).

If you have some complex layout as this wherein you want to layout in different ways basis the screen
size; You'd rather use CSS grid over flex;

for a simple one dimensional layout flexbox can be useful to help align content

Question-What are combinators? give examples of how you can use them

Answer-
Combinators lets you combine two or more selectors so you can be more specific in your selection 
method. There are different types of combinators.

Type & Class (.)

Multiple Selectors, Same Properties (,)
The comma in a CSS selector separates multiple selectors within the same styles.

Adjacent Sibling Selector (+)
The adjacent sibling combinator (+) separates two selectors and matches the second element only if 
it immediately follows the first element, and both are children of the same parent element.

General Sibling Selector (~)
The general sibling combinator (~) separates two selectors and matches the second element only if it
follows the first element (though not necessarily immediately), and both are children of the same 
parent.

Child Combinator (>)
The child combinator (>) is placed between two CSS selectors. It matches only those elements matched
by the second selector that are the children of elements matched by the first.

Descendant Combinator ( )
The descendant combinator typically represented by a single space ( ) character combines two 
selectors such that elements matched by the second selector are selected if they have an ancestor 
element matching the first selector.

Question-What does object-fit do?

Answer-
The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its 
container.

This property tells the content to fill the container in a variety of ways; such as "preserve that 
aspect ratio" or "stretch up and take up as much space as possible".

Question-What does rotate do?

Answer-
The transform property applies a 2D or 3D transformation to an element. This property allows you to 
rotate, scale, move, skew, etc., elements.

Question-What rule can be used to define animations

Answer-
The @keyframes rule specifies the animation code.

The animation is created by gradually changing from one set of CSS styles to another.

During the animation, you can change the set of CSS styles many times.

Specify when the style change will happen in percent, or with the keywords "from" and "to", which is 
the same as 0% and 100%. 0% is the beginning of the animation, 100% is when the animation is 
complete.

Question-   When working with attribute selectors, how can you select elements which contain a 
            particular attribute value?

Answer-
a[href*="en-US"] // selects an `a` tag which a particular href attribute value that has been asked

Question-What does @media do?

Answer-
The @media rule is used in media queries to apply different styles for different media types/devices.

Media queries can be used to check many things, such as:

    width and height of the viewport
    width and height of the device
    orientation (is the tablet/phone in landscape or portrait mode?)
    resolution

Using media queries are a popular technique for delivering a tailored style sheet (responsive web 
design) to desktops, laptops, tablets, and mobile phones.

You can also use media queries to specify that certain styles are only for printed documents or for 
screen readers (mediatype: print, screen, or speech).

In addition to media types, there are also media features. Media features provide more specific 
details to media queries, by allowing to test for a specific feature of the user agent or display 
device. For example, you can apply styles to only those screens that are greater, or smaller, than a 
certain width.

Question-What can be used to override properties of an element

Answer-
To override the CSS properties of a class using another class, we can use the '!important' directive. 
In CSS, '!important' means “this is important”, and the 'property:value' pair that has this directive is 
always applied even if the other element has higher specificity.

Question-How can you select every alternate elements in a list of elements using css?

Answer-
HTML:
<ul>
  <li>1</li>
  <li>2</li>
  <li>3</li>
  <li>4</li>
  <li>5</li>
  <li>6</li>
  <li>7</li>
  <li>8</li>
  <li>9</li>
  <li>10</li>
</ul>

CSS:
ul{
  list-style-type: none;
  color: white;
}
li:nth-of-type(odd){ // or you can also use li:nth-child(odd)
  background-color:blue;
}
li:nth-of-type(even){
  background-color:red;
}

Question-What is the ranking of selectors with respect to specificity

Answer-
Ranking from Low To High

    universal_selector, combinators selector, negation pseudo-class (:not) selector ( these selectors
    have no effects on specificity )

    element selector, pseudo element selector

    class selector, attribute selector, pseudo-class contained inside the overall selector

    id selector

    inline styling

Question-How can we apply same styles to multiple selectors?

Answer-
To group CSS selectors in a style sheet, use commas to separate multiple grouped selectors in the 
style. In this example, the style affects the p and div elements:

Question-What are the differences between relative and absolute in CSS?

Answer-
Relative:

An element with position: relative; is positioned relative to its normal position.

Setting the top, right, bottom, and left properties of a relatively-positioned element will cause 
it to be adjusted away from its normal position. Other content will not be adjusted to fit into 
any gap left by the element.

example : https://www.w3schools.com/css/tryit.asp?filename=trycss_position_relative

Absolute:

An element with position: absolute; is positioned relative to the nearest positioned ancestor. 
However; if an absolute positioned element has no positioned ancestors, it uses the document body, 
and moves along with page scrolling.

Absolute positioned elements are removed from the normal flow, and can overlap elements.

example: https://www.w3schools.com/css/tryit.asp?filename=trycss_position_absolute
